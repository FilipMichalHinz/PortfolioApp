using App.Model.Entities;
using App.Model.Repositories;
using Microsoft.Extensions.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace App.Tests.Repositories
{
    /* Summary
    This test class verifies the correctness of the password hashing functionality 
    provided by the UserRepository. Specifically, it ensures that the password 
    generated by HashPassword() can be successfully verified using 
    Microsoft's PasswordHasher. This helps validate that user authentication 
    using hashed passwords will behave as expected.
    */

    [TestClass]
    public class UserRepositoryTests
    {
        private IConfiguration _config;

        /*
        Initializes a mock configuration before each test.
        In this case, it sets up a fake connection string that is not actually used
        because this test does not touch the database.
        */

        [TestInitialize]
        public void Setup()
        {
            var configValues = new Dictionary<string, string>
            {
                // This is a dummy database connection string (not actually used in this unit test)
                { "ConnectionStrings:AppDb", "Host=localhost;Database=test;Username=test;Password=test" }
            };

            _config = new ConfigurationBuilder()
                .AddInMemoryCollection(configValues)
                .Build();
        }

        /// Tests whether the password hashed by UserRepository.HashPassword()
        /// can be successfully verified using PasswordHasher.

        [TestMethod]
        public void HashPassword_Produces_VerifiableHash()
        {
            // Arrange: Create a UserRepository instance using the fake config
            var repo = new UserRepository(_config);

            // Define a plain text password to test
            var password = "test";

            // Act: Call the HashPassword method to generate a password hash
            var hash = repo.HashPassword(password);

            // Create a dummy user entity to assign the generated hash
            var dummyUser = new User { PasswordHash = hash };

            // Use Microsoft's built-in PasswordHasher to verify the hash
            var hasher = new Microsoft.AspNetCore.Identity.PasswordHasher<User>();
            var result = hasher.VerifyHashedPassword(dummyUser, dummyUser.PasswordHash, password);

            // Assert: The hash should be verified successfully
            Assert.AreEqual(
                Microsoft.AspNetCore.Identity.PasswordVerificationResult.Success,
                result,
                "The hashed password should be valid and verifiable.");
        }
    }
}
